#!/usr/bin/env python

import sys,os,argparse,scipy,psutil,subprocess
import numpy as np
from sklearn.metrics.cluster import adjusted_rand_score
import faiss
from sklearn import metrics
import time

print('laplacian.py: ' + str(sys.argv), file=sys.stderr)
sys.stderr.flush()

t0 = time.time()

parser = argparse.ArgumentParser()
# parser.add_argument("-O", "--output", help="output file", required=True)
parser.add_argument("--save_prefix", help="output file", default=None)
parser.add_argument("-G", "--input_graph", help="input graph (pathname minus .X.i)", default=None)
parser.add_argument("-d", "--input_directory", help="input directory with embedding", default=None)
# parser.add_argument("-K", "--n_components", type=int, help="hidden dimensions [defaults = 32]", default=32)
parser.add_argument("--Laplacian", type=int, help="Laplacian [defaults = 1 (True)]", default=1)
parser.add_argument("--MaxIter", type=int, help="MaxIter [defaults = 50]", default=50)
parser.add_argument("--safe_mode", type=int, help="set to nonzero to be super careful", default=0)
args = parser.parse_args()


    if kwargs["Laplacian"]:
      D = np.zeros((n,1))
      for row in X:
        [v_i, v_j, edg_i_j] = row
        v_i = int(v_i)
        v_j = int(v_j)
        D[v_i] = D[v_i] + edg_i_j
        if v_i != v_j:
          D[v_j] = D[v_j] + edg_i_j

      D = np.power(D, -0.5)

      for i in range(s):
        X[i,2] = X[i,2] * D[int(X[i,0])] * D[int(X[i,1])]

    return X
